<?php
/**
 * Created by PhpStorm.
 * User: mohammad
 * Date: 8/7/17
 * Time: 1:11 AM
 */

namespace App\Model;


use Illuminate\Support\Facades\Auth;
use Jenssegers\Mongodb\Eloquent\Model as Eloquent;

/**
 * Class People
 * @package App\Models
 */
class People extends Eloquent
{


    protected $connection = "mongodb";
    /**
     * @var string
     */
    protected $collection = 'people';
    protected $guarded = ['_id'];
    /**
     * @var array
     */
    protected $request;


//    public function getRouteKeyName()
//    {
//         parent::getRouteKeyName(); // TODO: Change the autogenerated stub
//        return 'user_id';
//    }

    /**
     * @param User $user
     */
    public static function addUserInformationAndVirtualFund(User $user)
    {
        return self::create(
            [
                'user_id' => $user->id,
                'username' => $user->username,
                'name' => $user->name,
                'follower' => [],
                'following' => [],
                'watchlist' => [],
                'setting' => [],
                'risk' => [],
            ]
        );
    }

    /**
     * @param $userId
     * @param $type
     * @param $amount
     * @return mixed
     */
    public function wallet()
    {
        return $this->hasOne(Wallet::class,'people_id');
    }

    public function virtualWallet(){
        return $this->wallet()
            ->where('type','virtual');
    }
    public function realWallet(){
        return $this->wallet()
            ->where('type','real');
    }
    /**
     * increament available Wallet
     * @param $type
     * @param $amount
     * @return int
     */
    public function incrementAvailableWallet($type, $amount)
    {
       return $this->wallet()
           ->where('type',$type)->increment('available',$amount);
    }

    /**
     * decreament available wallet
     * @param $type
     * @param $amout
     * @return int
     */
    public function decrementAvaliableWallet($type ,$amout){
        return $this->wallet()
            ->where('type' ,$type)->decrement('available',$amout);
    }


    /**
     * Update morning available to current availble after Calculate daily Efficiency
     * @param $userId
     * @param $amount
     * @param string $type
     * @return mixed
     */
    public static function setMorningAvailableAfterCalc_DailyEfficiency($userId, $amount, $type = 'virtual')
    {
        return self::updateOne(
            ['user_id' => (int)$userId],
            [
                '$set' => [
                    "wallet.$type.morning_available" => (int)$amount
                ]
            ],
            ['upsert' => true],
            null
        );
    }

    /** relation Between People and Following User
     * @return \Jenssegers\Mongodb\Relations\EmbedsMany
     */
    public function following()
    {
        return $this->embedsMany(Following::class, 'following');
    }

    /**
     * @return \Jenssegers\Mongodb\Relations\EmbedsMany
     */
    public function copys()
    {
        return $this->embedsMany(Copy::class);
    }

    public function copyPeopleFollower(){
        return $this->copys()
            ->where('type','follower');
    }

    public function copypeoplefollowing(){
        return $this->copys()
            ->where('type','following');
    }


    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function user()
    {
        return $this->belongsTo(User::class);
    }

    /**
     * get People Base on User
     * @param \Jenssegers\Mongodb\Eloquent\Builder $query
     * @param  mixed $id
     * @return \Jenssegers\Mongodb\Eloquent\Builder
     */
    public function scopeForUser($query, $id)
    {
        return $query->where('user_id', $id);
    }

    /**
     * @return mixed
     * @param \Jenssegers\Mongodb\Eloquent\Builder $query
     */
    public function scopLoginPeople($query){
        return $query->where('user_id',Auth::user()->id);
    }


}
